import os
import subprocess as sp

reconstruction_gather_script = "./scripts/test_collect_parallel.py"
codegen_gather_script = "./scripts/test_collect_codegen_parallel.py"
codegen_tket_script = "./scripts/tket_tests_parallel.py"
reconstruction_plot_script = "./scripts/test_analyze_reconstruction.py"
timing_plot_script = "./scripts/test_analyze_time.py"
tket_plot_script = "./scripts/plot_tket_data_pandas.py"

qasm_dir = "./qrane/qasm"
reconstruction_dir = "./data/reconstruction"
codegen_dir = "./data/codegen"
tket_dir = "./data/transformation"

reconstruction_plots_dir = "./plots/reconstruction"
timing_plots_dir = "./plots/timing"
codegen_plots_dir = "./plots/transformation"

THREADS = "10"

def run_reconstruction(benchmark, chunk, search):
	input_dir = os.path.join(qasm_dir, benchmark)
	output_dir = os.path.join(reconstruction_dir, benchmark)
	command = ["python3.9", reconstruction_gather_script, 
		input_dir, output_dir, ".", chunk, search, THREADS]
	proc = sp.run(command)

def run_codegen(benchmark, chunk, search, sched):
	input_dir = os.path.join(qasm_dir, benchmark)
	output_dir = os.path.join(reconstruction_dir, benchmark)
	reordered_dir = os.path.join(codegen_dir, benchmark)
	command = ["python3.9", codegen_gather_script,
		input_dir, output_dir, reordered_dir, chunk, search, sched, THREADS]
	proc = sp.run(command)

def run_tket(benchmark, sched):
	reordered_dir = os.path.join(codegen_dir, benchmark)
	calibration = "./qrane/topologies/ibmq_brooklyn_calibrations.csv"
	arch = "./qrane/topologies/ibmq_brooklyn_calibrations.csv.dot"
	output_file = "tket-" + benchmark + "-" + sched + "-brooklyn.txt"
	output_full = os.path.join(tket_dir, output_file)
	command = ["python3.9", codegen_tket_script,
		reordered_dir, calibration, arch, output_full]
	proc = sp.run(command)

def plot_tket(benchmark):
	minfuse_path = os.path.join(tket_dir, "tket-queko-bigd-minfuse-brooklyn.txt")	
	maxfuse_path = os.path.join(tket_dir, "tket-queko-bigd-maxfuse-brooklyn.txt")
	command_gates = ["python3.9", tket_plot_script,
		minfuse_path, maxfuse_path, codegen_plots_dir, "0"] 
	proc_gates = sp.run(command_gates)

def plot_reconstruction(benchmark, color):
	input_dir = os.path.join(reconstruction_dir, benchmark)
	output_dir = reconstruction_plots_dir
	command = ["python3.9", reconstruction_plot_script, 
		input_dir, output_dir, benchmark, color]
	proc = sp.run(command)

def plot_timing(benchmark, color):
	input_dir = os.path.join(reconstruction_dir, benchmark)
	output_dir = timing_plots_dir
	command = ["python3.9", timing_plot_script, 
		input_dir, output_dir, benchmark, color]
	proc = sp.run(command)

ibmqx, ibmqx_color = "ibmqx", "blue"
queko_bss, queko_bss_color = "queko-bss-20qbt", "green"
qasmbench, qasmbench_color = "qasmbench-large", "purple"
queko_bigd, queko_bigd_color = "queko-bigd", "orange"

# These functions invoke qrane only to perform reconstruction and store the results
run_reconstruction(ibmqx, "1000", "512")  # The last two parameters are chunk=1000 and search_limit=512
run_reconstruction(queko_bss, "1000", "0")
run_reconstruction(qasmbench, "2000", "0")

# These functions invoke qrane to perform reconstruction
# and generate reordered OpenQASM code.
run_codegen(queko_bigd, "0", "0", "minfuse")
run_codegen(queko_bigd, "0", "0", "maxfuse")

# These functions invoke the TKET compiler on both the original
# openqasm and the reordered qasm from Qrane
run_tket(queko_bigd, "minfuse")
run_tket(queko_bigd, "maxfuse")

# This function plots the tket data generated by the two functions above.
# NOTE: This function requires both "minfuse" and "maxfuse" data be
# present from the above two functions.
plot_tket(queko_bigd)

# These functions plot the reconstruction data as well as execution time plots
plot_reconstruction(ibmqx, ibmqx_color)
plot_reconstruction(queko_bss, queko_bss_color)
plot_reconstruction(qasmbench, qasmbench_color)
plot_timing(ibmqx, ibmqx_color)
plot_timing(queko_bss, queko_bss_color)
plot_timing(qasmbench, qasmbench_color)
